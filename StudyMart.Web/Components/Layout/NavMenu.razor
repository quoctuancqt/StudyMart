@using StudyMart.Contract.ShoppingCart
@using StudyMart.Web.States
@inject CartContainer CartContainer
@inject ProtectedLocalStorage ProtectedLocalStorage
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">StudyMart</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="collapse navbar-collapse show" id="navbarNav">
    <nav class="nav flex-column">
        @* <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="bi bi-house-door-fill" aria-hidden="true"></i> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="cart">
                <i class="bi bi-basket" aria-hidden="true"></i> Cart (@(CartContainer.TotalItems))
            </NavLink>
        </div> *@
        <AuthorizeView>
            <Authorized>
                @if ((_authenticationState?.User.IsInRole("Administrator") ?? false) && _authenticationState?.User.Identity?.IsAuthenticated == true)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="category">
                            <i class="bi bi-card-list" aria-hidden="true"></i> Categories
                        </NavLink>
                    </div>
                }
                @* <div class="nav-item px-3">
                    <NavLink class="nav-link" href="my-orders">
                        <i class="bi bi-box" aria-hidden="true"></i> My Orders
                    </NavLink>
                </div> *@
                <div class="nav-item px-3">
                    <form action="/authentication/logout" method="post" @formname="logout-form" id="logout-form">
                        <AntiforgeryToken/>
                        <NavLink class="nav-link" href="#" onclick="document.getElementById('logout-form').submit(); return false;">
                            <i class="bi bi-box-arrow-right" aria-hidden="true" style="margin-right:0.5rem;"></i> Sign out
                        </NavLink>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="authentication/login">
                        <i class="bi bi-box-arrow-left" aria-hidden="true" style="margin-right: 0.5rem;"></i> Sign In
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>

    </nav>
</div>

@code
{
    private AuthenticationState? _authenticationState;
    
    protected override async Task OnInitializedAsync()
    {
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CartContainer.OnChange += StateHasChanged;
        var result = await ProtectedLocalStorage.GetAsync<List<CartItemDto>>("cart");
        var cartItems = result.Value ?? new List<CartItemDto>();
        CartContainer.TotalItems = cartItems.Sum(c => c.Quantity);
    }

    public void Dispose()
    {
        CartContainer.OnChange -= StateHasChanged;
    }
}
