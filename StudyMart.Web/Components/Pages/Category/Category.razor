@page "/"
@using Microsoft.AspNetCore.Authorization
@using StudyMart.Web.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using StudyMart.Contract.Category
@inject CategoryService CategoryService
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

<PageTitle>Category</PageTitle>

@if (_categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@_categories.AsQueryable()">
        <PropertyColumn Property="@(c => c.Id)" Sortable="true" />
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" />
        <PropertyColumn Property="@(c => c.Description)" />
        <TemplateColumn Title="Actions">
            <button @onclick="@(() => EditCategory(context))">Edit</button>
            <button @onclick="@(() => DeleteCategory(context.Id))">Delete</button>
        </TemplateColumn>
    </QuickGrid>

    <EditForm Model="CurrentCategory" OnValidSubmit="HandleValidSubmit" FormName="category-form">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="CurrentCategory!.Name"/>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private List<CategoryDto>? _categories;
    [SupplyParameterFromForm]
    private CategoryDto? CurrentCategory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.GetCategoriesAsync();
        CurrentCategory ??= new();
    }

    private void EditCategory(CategoryDto category)
    {
        CurrentCategory = category;
    }

    private async Task DeleteCategory(int id)
    {
        await CategoryService.DeleteCategoryAsync(id);
        _categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (CurrentCategory?.Id == 0)
        {
            await CategoryService.AddCategoryAsync(CurrentCategory);
        }
        else
        {
            await CategoryService.UpdateCategoryAsync(CurrentCategory!);
        }

        CurrentCategory = new();
        _categories = await CategoryService.GetCategoriesAsync();
    }
}
