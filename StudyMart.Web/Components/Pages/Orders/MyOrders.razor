@page "/my-orders"
@using Microsoft.AspNetCore.Authorization
@using StudyMart.Contract.Order
@using StudyMart.Web.Services
@attribute [Authorize]
@inject OrderService OrderService
@inject NavigationManager Manager

<h3>Orders:</h3>
@if (_orders?.Count() == 0 || _orders is null)
{
    <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Primary" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order Id</th>
                <th>Order Date</th>
                <th>Total</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in _orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.OrderDate</td>
                    <td>$@order.TotalAmount</td>
                    <td>
                    @if (order.Status == OrderStatus.Pending.ToString())
                    {
                        <button class="btn btn-success" @onclick="() => ApproveOrder(order.OrderId)">Approve</button>
                        <button class="btn btn-danger" @onclick="() => RejectOrder(order.OrderId)">Reject</button>
                    }
                    else
                    {
                        @order.Status
                    }
                </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<OrderDto> _orders;

    protected override async Task OnInitializedAsync()
    {
        _orders = await OrderService.GetOrdersAsync();
        await base.OnInitializedAsync();
    }

    private void ApproveOrder(int orderId)
    {
        _ = OrderService.ChangeOrderAynsc(orderId, OrderStatus.Processing);
        Manager.NavigateTo(Manager.Uri, true);
    }

    private void RejectOrder(int orderId)
    {
        _ = OrderService.ChangeOrderAynsc(orderId, OrderStatus.Cancelled);
        Manager.NavigateTo(Manager.Uri, true);
    }
}